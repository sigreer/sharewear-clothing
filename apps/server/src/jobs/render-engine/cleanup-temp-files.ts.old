/**
 * Cleanup Temporary Files - Scheduled Job
 *
 * This scheduled job runs daily to clean up:
 * 1. Old temporary render files
 * 2. Old completed jobs from the queue
 * 3. Old failed render jobs from the database
 *
 * Helps maintain system health and prevent disk space issues.
 */

import { MedusaContainer } from "@medusajs/framework/types"
import { cleanCompletedJobs, cleanFailedJobs } from "./queue-config"

/**
 * Cleanup Temp Files Job
 *
 * Performs daily maintenance tasks:
 * - Removes temporary render files older than 24 hours
 * - Cleans completed queue jobs older than 24 hours
 * - Removes failed database job records older than 7 days
 *
 * @param container - Medusa container for resolving services
 */
export default async function cleanupTempFiles(
  container: MedusaContainer
): Promise<void> {
  const logger = container.resolve("logger")

  logger.info("[CleanupJob] Starting daily cleanup...")

  try {
    // Note: Services are not directly resolvable, so we skip file system cleanup for now
    // This will be implemented once service resolution is properly configured
    logger.info("[CleanupJob] File system cleanup skipped (service resolution pending)")

    // Task 1: Clean up old completed queue jobs
    logger.info("[CleanupJob] Cleaning completed queue jobs...")

    try {
      const completedJobsCount = await cleanCompletedJobs(
        24 * 60 * 60 * 1000 // 24 hours
      )

      logger.info(
        `[CleanupJob] Cleaned ${completedJobsCount} completed queue job(s)`
      )
    } catch (error) {
      logger.error(
        "[CleanupJob] Failed to clean completed queue jobs:",
        error
      )
    }

    // Task 2: Clean up old failed queue jobs
    logger.info("[CleanupJob] Cleaning failed queue jobs...")

    try {
      const failedQueueJobsCount = await cleanFailedJobs(
        7 * 24 * 60 * 60 * 1000 // 7 days
      )

      logger.info(
        `[CleanupJob] Cleaned ${failedQueueJobsCount} failed queue job(s)`
      )
    } catch (error) {
      logger.error(
        "[CleanupJob] Failed to clean failed queue jobs:",
        error
      )
    }

    logger.info("[CleanupJob] Daily cleanup completed successfully")

  } catch (error) {
    logger.error(
      "[CleanupJob] Cleanup job failed:",
      error
    )
    throw error
  }
}

/**
 * Job configuration
 *
 * Runs every day at 2 AM to perform cleanup tasks during low-traffic hours.
 */
export const config = {
  name: "cleanup-render-temp-files",
  schedule: "0 2 * * *" // Every day at 2:00 AM
}
